#!/usr/bin/env python

import glob
import os
from functools import partial

from locmoss import MossEngine, Parser, Winnower
from locmoss.moss import Filter
from locmoss.query import SoftwareList, CorpusStat, Ranking
from locmoss.query import CountScorer, JaccardScorer
from locmoss.software import Software


def print_header(s):
    pad_len =  (78 - len(s))//2
    padding = " "*pad_len
    end_padding = " "*(78-len(s)-pad_len)
    print("/{}+".format("-"*78))
    print("|{}{}{}|".format(padding, s, end_padding))
    print("+{}/".format("-"*78))



def process_files(moss, paths, verbose=True, fail_fast=True):
    for path in paths:
        files = [os.path.realpath(file) for file in glob.glob(path)]
        if verbose:
            print_header("Processing '{}'".format(path))
            for file in files:
                print(file)

        try:
            moss.update_index(path, glob.glob(path))
        except Exception as e:
                print("\t ** Error: {} ** Skipping...".format(e))
                if fail_fast:
                    raise
                continue
        if verbose:
            print("Number of fingerprints:", moss.softwares[-1].count_fingerprints())


def select_parser_factory(lang):
    import pygments.lexers
    if lang is None:
        return Parser
    else:
        return partial(Parser, lexer=pygments.lexers.get_lexer_by_name(lang))
    #
    # import pygments.lexers.lisp
    # import pygments.lexers.c_cpp
    #
    # if lang == "scheme":
    #   return partial(Parser, lexer=pygments.lexers.lisp.RacketLexer())
    # if lang == "c":
    #     return partial(Parser, lexer=pygments.lexers.c_cpp.CLexer())
    # else:
    #     return Parser

def avg_n_fingerprints(moss):
    n_software = len(moss.softwares)
    total = sum(x.count_fingerprints() for x in moss.softwares)
    return float(total) / n_software


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("paths", nargs="*")
    parser.add_argument("--reference", "-r", default=None)
    parser.add_argument( "--language", "-l", default=None)
    parser.add_argument("--window_size", "-w", default=15, type=int)
    parser.add_argument("--kgram_len", "-k", default=5, type=int)
    parser.add_argument("--collision_threshold", "-c", default=10, type=int)
    parser.add_argument("--silent", action="store_true")
    parser.add_argument("--fail_fast", action="store_true")
    parser.add_argument("--size", "-s", default=15, type=int)

    args = parser.parse_args()
    verbose = not args.silent

    parser_factory = select_parser_factory(args.language)

    fingerprinter = Winnower(parser_factory, args.window_size, args.kgram_len)
    filter = Filter(args.collision_threshold)

    moss = MossEngine(fingerprinter, filter)

    softwares = Software.list_from_globs(args.paths)
    reference = None
    if args.reference is not None:
        reference = Software.list_from_globs((args.reference,))

    if verbose:
        print("Building index and matching graph...")
    moss.build_index(softwares, reference)

    moss.query(SoftwareList()).query(CorpusStat())
    rank_query = Ranking(args.size, CountScorer(), JaccardScorer())
    moss.query(rank_query)